const updatedVariant = await ProductVariant.findOneAndUpdate(
  {
    _id: variantId,
    stock: { $gt: 0 }
  },
  {
    $inc: { stock: -1 }
  },
  { new: true }
);

if (!updatedVariant) {
  throw new Error("Out of stock");
}


const updatedOffer = await Offer.findOneAndUpdate(
  {
    _id: offerId,
    currentUsage: { $lt: offer.usageLimit }
  },
  {
    $inc: { currentUsage: 1 }
  },
  { new: true }
);

if (!updatedOffer) {
  throw new Error("Offer usage limit reached");
}

// If update succeeded, record redemption
await OfferRedemption.create({ offerId, userId });







have to devlope th corn job to delete the image in evry 10 mint have it but for now jump over it.
























------------------------ work Added

mosaic-biz-hub Variant creation Route , Variant updation Route and Variant Deletion Route Configured, Developed Variant Creation API, Developed Variant Updation API, Developed Variant Deletion API, Postman Testing Under Process

Connected Minority Type Api with the frontend dropdown list in index page added Loading state,Developed And Build Minority Model, Developed Minority Type Creation Api, Developed minority Listing api for public (Only isActive type Visible), developed minority Updation APi, Developed Minority type Deletion api, 


Integrate resend Otp Module with frontend and Add coolDown Timer to get Rid off OTP Spamming .


User Mangement Module:
Developed User Mangement Module, Developed Listing api (Admin percpctive), Developed User Updation api, Developed User Deletion api, developed api to block and unblock user from the platform.

FAQs Module
developed FAQ Updation Api, Developed FAQ Deletion api, Configured CMS Routes to Get FAQs from the db

testimonial Module
Developed testimonial model, Configured testimonial specific routes, Developed testimonial listing Api (Admin percepctive), Developed testimonial Creation api, developed testimonial Updation Api, Developed testimonial Deletion api, Configured CMS Routes to Get testimonial from the db








------------------------ work Done



wishlist Module
Developed wishlist model, Configured wishlist specific routes, Developed wishlist listing Api (Only Authenticated Customer), Developed wishlist Creation api, Developed product removing api from the wishlist.



Blog Module:
Developed Blog Model, Configured Blog specific Routes, Developed Blog Listing Api (Admin percepctive), Developed Get Specific Blog Api (Admin percepctive), Developed Blog Listing Api (public percepctive), Developed Get Specific Blog Api (Public percepctive), Developed Blog Creation Api, Developed Blog Updation Api, Developed Blog Deletion Api, Developed Blog Feature/UnFeature Toggle Api, Developed Blog Publish/UnPublish Toggle Api


1. Navbar Enhancements

    Integrated gender-based avatar rendering (male/female) based on user cookies.

    Implemented a dropdown menu with Dashboard, Profile, and Logout options for logged-in users.

    Added a pulse (breathing) animation to login buttons while cookie-based login status is being verified to prevent UI flicker.

2. Authentication & Logout Flow

    Developed a robust Logout API that clears all session cookies, including HttpOnly tokens.

    Integrated client-side cookie cleanup and redirection upon logout.

    Ensured seamless logout experience across roles.

3. Middleware & Role-Based Access Control

    Updated middleware to support role-based redirection (e.g., customer, vendor).

    Enforced access restrictions for protected routes based on user roles.

    Maintained a unified Profile page accessible to all authenticated users.

4. Business Registration Page

    Designed and developed the complete Business Registration form with labels, validation, and clean layout.

    Connected the form to the backend API for business submission.

    Ensured full responsiveness and accessibility across devices.









I enhanced the Navbar by adding gender-based avatars with a dropdown menu for logged-in users, including Dashboard, Profile, and Logout options. I implemented a breathing animation on login buttons to avoid flicker while checking cookies. Additionally, I developed a logout API that clears all cookies, including HttpOnly tokens, and updated middleware to handle role-based redirection and access control. A shared Profile page was maintained for all roles. Lastly, I designed and implemented a fully responsive Business Registration page with labeled fields, validations, and API integration.



developed and styled the complete business registration form with dynamic plan selection, file uploads (logo and cover image), and integrated form submission with loading and feedback handling, structured the routing to redirect users to `/partners` (Business Owner Dashboard) after registration and created the `/partners/[businessid]/setup` page to handle bank details.Developed the bank details UI based on the provided figma Design, fixed a TypeScript warning


service module : 
implemented slug generation, location support (address + coordinates), and verifying all core APIs including create, update, delete, and get my services, Developed new get service by ID Api.tested everything on Postman with sample data.planned the complete structure for the food module, deciding to use a unified model with a foodType field to differentiate between food from Shop, Farm (both delivery-based), and Restaurant (table booking only).



Service model automated total Review and Average rating update on any chnges in the rating and review model.





Product Order payment Module:
Created Address Model to Store the saved address, Created Order model To store the orders done by the user with products, quantity and total price ..etc, Created Refund Model, Developed orderController to creted order on sucessfull payment, Developed Webhook to chcek the Payment Status. configured routes for the Product Order, Payment, Webhook's.








Today, you worked on implementing and debugging the **Stripe webhook** to handle events like `checkout.session.completed`. You ensured **signature verification** by using `express.raw()` for the webhook route and added detailed **debugging logs** to track the raw request and identify any errors. You created a **Stripe Checkout session**, processed it by retrieving the **BusinessDraft**, and used its data to create a **Subscription** and **Business**. You also created a new **BusinessDraft** model to store business-related drafts. Additionally, you handled the **500 error** by logging the process step-by-step and ensured proper error handling, all while testing the webhook with **Stripe CLI** to simulate events.






08-07-2025

Created retryCreateBusiness API to create a business from an existing subscription.

Integrated frontend to select existing subscription and create a business.

Fixed TypeScript errors related to subscription types.

Implemented Stripe Checkout and payment validation.

Set up and tested Stripe webhook using the CLI.

Displayed new and existing subscription plans in the frontend with tab functionality.

Added redirection to /partners on successful business creation.

Handled subscription checks and ensured successful business creation only for completed payments.


[[[[[[[[[[[[in paragraph
Today, we implemented the `retryCreateBusiness` API to allow business creation from an existing subscription, integrated Stripe Checkout and payment validation, and tested the Stripe webhook using the CLI. We also fixed TypeScript errors related to subscription types, displayed both new and existing subscription plans in the frontend with tab functionality, and ensured redirection to `/partners` on successful business creation. Additionally, we added subscription checks to ensure business creation only for completed payments.
In the frontend, we created a tab to toggle between new and existing subscription plans, displaying the existing plans if available. We added a form for business creation, where the selected subscription plan (new or existing) is used to submit the business data. On successful business creation, the user is redirected to /partners. We handled the payment and subscription selection logic, ensuring that users can either retry business creation using an existing subscription or create a new one, with proper handling of subscription and payment status checks.]]]]]]]]]]]]





10
Added Category selection in Business Creation Form which will be disabled till the listing type is not selected once the listing type is selected it will display the category based on Listing.
Developed api to fetch the existing Subscription paln of the user
Configured routes for fetching existing Subscription paln of the user
Developed Api To get all the categories from the db realted to the Food,service,product
configured route for it,



Updated Business Creation api to work without the logo and coverImage.
updated Stripe webhook so paymet can be verifed and business can be creted without the logo and coover image 


✅ Token is stored in HttpOnly cookie (sameSite: 'lax') → survives Stripe redirect.

✅ user_session & user_gender moved to localStorage Login and Otp varification page updated.

✅ Stripe redirects to /partners, middleware reads the token and allows access.

✅ Created a product business listing API with filters & pagination.

✅ Integrated it in the frontend VendorGrid.

✅ Replaced dummy data with real API calls.

✅ Added debounced search for business name.

✅ Added a loading spinner during API fetch.

✅ ServiceCategory model: Added slug, auto-generate on save.

✅ ProductCategory model: Added slug, auto-generate on save.

✅ Service Listing API (getAllServices):

Added search, filter by city, minorityType, categorySlug, online booking, offers.

Category filtering uses categorySlug → ObjectId mapping.

Supports sorting, pagination.

✅ ServicePage (Frontend):

Setup React page with Hero, CategoryGrid, and BookServices.

Integrated API call for fetching services.

Dynamically passed services to BookServices.

✅ BookServices component:

Rendered dynamic data.

"Read More" → linked to /services/[slug].

✅ Configured external images: Allowed Cloudinary & AWS S3 in next.config.ts.

Changed service detail route to /service/[slug].

Updated Link to point to /service/${service.slug}.

Fixed the conflict with /services/[categorySlug].


                        or


 ✅ Work Summary for Today

1. Token is stored in HttpOnly cookie (sameSite: 'lax') to survive Stripe redirects.
2. Moved `user_session` & `user_gender` to localStorage; updated Login and OTP verification pages.
3. Stripe redirects to `/partners`, middleware reads the token for protected access.
4. Created Product Business Listing API with filters & pagination.
5. Integrated the business listing API in the VendorGrid frontend.
6. Replaced dummy vendor data with real API calls.
7. Added debounced search for business names.
8. Implemented a loading spinner during API fetch.
9. Updated ServiceCategory and ProductCategory models to auto-generate slugs on save.
10. Built Service Listing API (`getAllServices`) with filters: search, city, minorityType, categorySlug, online booking, offers, sorting, and pagination.
11. Integrated Service Listing API in the ServicePage with Hero, CategoryGrid, and BookServices components.
12. Dynamically passed services to BookServices and rendered them.
13. Linked "Read More" in services to `/services/[slug]`.
14. Configured Cloudinary & AWS S3 for external images in `next.config.ts`.
15. Refactored service detail route to `/service/[slug]` and updated links, fixing route conflicts with `/services/[categorySlug]`.

---

 📄 Summary Paragraph:

Today, I completed several backend and frontend tasks including implementing secure token storage using HttpOnly cookies, creating business listing APIs with filters and pagination, and integrating them into the VendorGrid component with debounced search and a loading spinner. I refactored the ServiceCategory and ProductCategory models to auto-generate slugs, enhanced the service listing API with comprehensive filtering and sorting, and integrated it into the ServicePage. Additionally, I resolved routing conflicts by separating the service detail and category listing routes, ensuring seamless navigation and proper image loading from Cloudinary and AWS S3.


11-07-2025

Service Detail & Listing
Integrated Get Service by Slug API (/api/public/services/:slug) in the Service Detail page.

Added review fetching in the Service API and displayed reviews on the frontend.

Corrected the TypeScript types for Service and Review, created an interface for API response.

Replaced static service and review data with dynamic API calls.

Handled Loading and Not Found states with icons (Loader2, AlertTriangle).

Converted phone, email, and website fields to tel, mailto, and external links respectively.


---------------------> here i was ()



Category-Based Service Listing (services/[id]/page.tsx)
Connected the Service List API (/api/services/list) with filters: categorySlug, search, minorityType, city.

Fixed URL query mismatch (searchText → search, location → city).

Implemented search button behavior → fetches services only on click.

Show/hide <CategoryGrid /> based on filter state (search, minorityType, location).

Corrected JSX ternary conditional syntax.

Fixed Google Maps iframe usage in service card map preview.




utils/paymentGatway
-------------------- TODO : ----------------------

1. Get Product
2. Product update



in Business There is no Social Category 



// ---------------APIS

Google Maps Geocoding API
Google Maps Reverse Geocoding API
Google Maps JavaScript API


Google Maps Geocoding API

    Use: Convert manually entered address → coordinates

    Free tier: 40,000 requests/month

    Beyond: ~$5 per 1,000 requests

Google Maps Reverse Geocoding API

    Use: Convert coordinates (from GPS) → human-readable address

    Free tier: Included in geocoding quota

    Beyond: Same rate as above

Google Maps JavaScript API

    Use: Show interactive map, draw markers, radius filters, etc.

    Free tier: $200/month free (~28,000 map loads)

    Beyond: ~$7 per 1,000 map loads




Google Places Autocomplete API	
Google Maps Geocoding API
Google Maps Reverse Geocoding API
Google Maps JavaScript API




------------------------------ ## Deployment ## --------------------------------




👉 All-in-EC2 if you're comfortable managing a server (cheaper, more control).

👉 Amplify + Beanstalk if you prefer ease, no server headaches, and built-in CI/CD.


| AWS Service                     | Estimated Monthly Cost |
| ------------------------------- | ---------------------- |
| Amplify Hosting (Frontend)      | $5 – $10               |
| Elastic Beanstalk (Backend)     | $10 – $20              |
| Amazon S3 (Images/Files)        | $1 – $5                |
| Total (AWS only):               | $16 – $35/month        |


 If Within Free Tier (First Year):


| AWS Service                   | Monthly Cost                           |
| ----------------------------- | -------------------------------------- |
| Amplify (Free Tier)           | $0                                     |
| Elastic Beanstalk (Free Tier) | $0                                     |
| Amazon S3 (Free Tier)         | $0                                     |
| Total (AWS only):             | $0 – $5/month (depends on usage)       |