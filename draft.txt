11-07-2025

 Frontend (Next.js / TypeScript):

    Integrated Get Service by Slug API (`/api/public/services/:slug`) on the Service Detail page.
    Displayed service details and reviews dynamically instead of using static data.
    Corrected TypeScript types for `Service` and `Review`, and created an API response interface.
    Handled Loading and Not Found states using Loader2 and AlertTriangle icons.
    Converted phone, email, and website fields into clickable `tel:`, `mailto:`, and external links.
    Connected to the Service List API (`/api/services/list`) for category-based listing.
    Fixed query parameter mismatches (`searchText → search`, `location → city`).
    Implemented Search button functionality to fetch services on click.
    Showed/hid the `<CategoryGrid />` component based on active filter values.
    Embedded Google Maps iframe for the selected service's address in the map sidebar.


 Backend (Node.js / Express / Mongoose):

    Enhanced the Service List API (`/api/services/list`) to support:

    categorySlug → categoryId conversion
    search, city, minorityType filters
    sorting by price, rating, and reviews.
    Developed the Get Service by Slug API to:

    Fetch the service by slug
    Fetch and include related reviews
    
    Ensured category-based filtering works correctly by querying `ServiceCategory` using the slug.

14-07-2025

   Developed the main Product Page with category and product listings (static fetching).

   Developed the Business Dashboard page with key metric cards and visuals.

   Built the SalesSection component with bar, pie, and line charts using recharts.

   Enabled pie chart hover behavior with scale and value popover effect.

   Styled the Order Status section with inner color ring and custom legend.

   Updated next.config.js to allow image loading from external domains.


   Developed Main Product Page With categories and product, Made Routing perfect, Developed the Business Dashboard page with key metric cards and visuals, Built the SalesSection component with bar, pie, and line charts using recharts, Enabled pie chart hover behavior with scale and value popover effect, Styledwith inner color ring and custom legend, Updated next.config.js to allow image loading from external domains

15-07-2025

   1. Made the sidebar responsive, ensuring it collapses on mobile and remains static on desktop, with a working hamburger menu for toggling.

   2. Adjusted the Topbar for mobile responsiveness by implementing a hamburger menu and hiding the search bar on smaller screens.

   3. Resolved the issue of excessive left padding in the `LineChart`, ensuring it adapts correctly across all screen sizes.

   4. Made The sidebar, Topbar, OverviewCards, SalesSection, SubscriptionPlan, ProductTable responsive 

16-07-2025

   API Creation:

      Created the getBusinessBySlug API.

      Created the following routes for fetching business-related data:

      /services/list - Fetch all private services for a business (including unpublished).

      /services/:slug - Fetch a specific service for a business (including unpublished).

      /food/list - Fetch all food/products for a business (including unpublished).

      /products/list - Fetch all products for a business (including unpublished).

      /food/list - Fetch all food/products for a business (Only Published).

      /products/list - Fetch all products for a business (Only Published).

   Frontend Development:

      Created the loading screen and the not found screen for product and food listings.

      Developed the Review and Rating component.

      Developed the TopSelling MapComponent to display geospatial data of the business.

      Made the Business Owner Dashboard responsive.

17-07-2025

   Updated Product API

      Flattened sizes to size-level records.
      Added `salePrice` and `sizeId`.
      Included Product Out of Stock and `sellableCount` in API response.

   Updated Business API

      Populated `subscriptionPlan` inside `subscription`.
      Returned business, subscription, and subscriptionPlan as separate objects.

   Frontend Enhancements

      Displayed dynamic subscription & subscription plan details in the dashboard.
      Updated Product Table to show `salePrice`, stock status, and dynamic counts (`total`, `sellableCount`).
      Added skeleton loader and error state for better UX.

   Planning for Inventory Page

      Decided to create `/partners/[businessid]/inventory`.
      Will fetch business data by slug to get `listingType` dynamically.

18-07-2025

   Developed Inventory Page with full dynamic support for Products, Services, and Food based on listingType.

   Integrated Product/Service/Food fetching logic with withCredentials for secure API calls.

   Introduced global state using Zustand to store business data and reduce repeated API calls.

   Implemented logic to check cached business (compares store slug with URL slug, clears & fetches if different).

   Improved Loading & Error UI – Added spinner loader and styled alert boxes.

   Added 3 Overview Boxes (Total, Available, Out Of Stock/Unpublished) with responsive grid design.

   Converted Add Button to a Next.js Link, dynamically using businessid from URL.

   Made Inventory Page responsive across all devices.

   Added Logout Functionality in partner's sidebar.

   added Gender based Avtars in partner's tpbar

22-07-2025 

   Developed the Vendor Profile Page with proper layout and sections.

   Integrated backend API to fetch and display business-specific details dynamically.

   Displayed real business name in the sidebar and showed the first character of the business name as the logo image fallback.

   Made the Vendor Profile Page fully responsive for all screen sizes.

31-07-2025

   Created product grouping logic in backend to fetch grouped products with variants and sizes.

   Modified product listing API to match ProductListingItem type (includes size, pricing, ratings).

   Integrated product listing API on frontend to show real products.

   Handled Decimal128 conversion on backend to ensure proper numeric values for price/salePrice.

   Integrated discount visibility logic based on salePrice and discountEndDate.

   Added loading state handling for product and service listings.

   Fixed issue with image scaling (small image) using Tailwind adjustments.

05-08-2025

   Product Subcategory APIs
      GET /api/admin/category/product-subcategory – List all product subcategories

      POST /api/admin/category/product-subcategory – Create a product subcategory

      PUT /api/admin/category/product-subcategory/:id – Update a product subcategory

      DELETE /api/admin/category/product-subcategory/:id – Delete a product subcategory
      
   Service Category
      GET /api/admin/category/service – list all service categories

      POST /api/admin/category/service – create service category

      PUT /api/admin/category/service/:id – update category

      DELETE /api/admin/category/service/:id – delete category

   Food Category
      GET /api/admin/category/food – list all food categories

      POST /api/admin/category/food – create food category

      PUT /api/admin/category/food/:id – update category

      DELETE /api/admin/category/food/:id – delete category

   Handled default image fallback for missing category images.
   Made category cards fully clickable via Link.
   integrated all the api's in the Admin Dashboard categories management page

07-08-2025

   Created Booking Management Page in the Partner Dashboard to list all vendor bookings with filters.

   Integrated the listing API in the Booking Management Page to fetch vendor-specific bookings dynamically.

   Displayed customer info (name, email, phone), service title, booked items, time, and date.

   Displayed booking creation time using createdAt field from MongoDB.

   Implemented conditional action buttons based on booking status:

      Confirm (when status is Booked)

      Complete (when status is confirmed)

      Decline (visible unless status is completed)

   Integrated Confirm, Complete, and Decline APIs to update booking statuses in real-time.

11-08-2025

   Created new types related to orders (VariantSize, Variant, Product, Item, ShippingAddress, StatusHistory, Order) to ensure error-free rendering of order-related data on the Customer Order page.

   Added toast notifications for error handling.

   Developed a "No Orders" screen for when there are no orders to display.

   integrated backend Order api's to Dispaly the data of users

12-08-2025 
   1. Added Stripe Connect fields to Business model (account ID, charges/payouts flags, onboarding status).
   2. Built POST /api/connect/\:businessId/account-link (create/reuse Express account + onboarding link).
   3. Built GET /api/connect/\:businessId/status (sync charges/payouts/capabilities + status).
   4. Extended Stripe webhook with account.updated to keep onboarding state in sync.
   5. Implemented single-vendor initiateOrder with `transfer_data.destination` + `application_fee_amount`.
   6. Added idempotency + rich metadata to PaymentIntents.
   7. Updated webhook payment\_intent.succeeded to mark orders paid → ordered and store `chargeId`/`transferId`/`applicationFeeId`.
   8. Frontend: vendor dashboard shows Connect with Stripe, then Locked—waiting for approval, then full dashboard when approved.
   9. Frontend: vendors list page shows Connect button per business or Locked/“Go to Business” based on status.
   10. Fixed Invalid URL error by ensuring absolute `return_url` in frontend and robust URL handling in Connect flows.

13-08-2025 to 14

   1. Designed Stripe Connect flow: added account linking, status check, and gating business visibility until Connect is complete.
   2. Backend Connect endpoints: `POST /api/connect/:businessId/account-link`, `GET /api/connect/:businessId/status`, plus optional return/refresh handlers.
   3. Business model updates (discussed): fields for `stripeConnectAccountId`, `onboardingStatus`, `chargesEnabled`, `payoutsEnabled`, `onboardedAt`, `capabilities`.
   4. Fixed “Invalid URL: explicit scheme” errors by enforcing absolute HTTPS return/refresh URLs and robust URL builders.
   5. Clarified PaymentIntent strategies: cards-only vs. all methods with proper `return_url`; removed undefined vars (`buyerStripeCustomerId`, `buyerEmail`).
   6. Implemented single-vendor `initiateOrder` directing funds to vendors via `transfer_data.destination` and platform fee via `application_fee_amount`.
   7. Added idempotency keys and rich metadata to PaymentIntents.
   8. Webhook `payment_intent.succeeded`: mark orders paid→ordered; capture and store `chargeId` / `transferId` / `applicationFeeId`; fixed scope bug (`it` not defined) and added robust charge retrieval with expands.
   9. Frontend vendor dashboard updates: “Connect with Stripe” CTA, status banner, and “Locked — waiting for admin approval” logic.
   10. Vendors list page: per-business Connect status + CTA; show “Go to Business” when approved.
   11. Resolved frontend return\_url issue by building from `window.location.origin` / env and explaining when to omit it.
   12. Admin users API: returned counts `totalVendor`, `totalCustomer`, plus OTP verification counts (`otpVerified`, `otpUnverified`).
   13. Admin Users page: added stat cards (Vendors, Customers) and later a Verification card (Verified/Unverified) with Lucide icons; built users table UI.
   14. Admin orders API: `GET /admin/api/orders` with filters, pagination, and summaries for payment (`pending/paid/failed/refunded`) and status (created→refunded).
   15. Admin Orders page: top summary cards, status distribution chips, paginated orders table.

   planed: 
      16. Subscription plans: moved from hard-coded price map to Stripe-backed plans.
      17. Extended `SubscriptionPlan` schema with Stripe/billing fields (`stripeProductId`, `stripePriceId`, `currency`, `interval`, `intervalCount`, `trialPeriodDays`).
      18. Created helper `ensurePlanPrice` to lazily create Stripe Product + Price and persist IDs.
      19. Updated plan controllers: admin `create` auto-creates product/price; `update` creates a new Stripe Price when billing terms change; added list/get endpoints and admin routes.
      20. Checkout session now pulls plan from DB, ensures price, and uses `stripePriceId` (no more hard-coded maps).

20-08-2025 
   4. Created `PUT /update/:cartItemId` – `updateCartItem` API: Updates the quantity of an item in the cart, Checks stock availability and handles backorder support, Validates that the product and variant are valid and published.
   5. Created `DELETE /remove/:cartItemId` – `removeItemFromCart` API: Removes a specific item from the cart, Validates that the cart item belongs to the authenticated user, Updates the total items in the cart and deletes the CartItem document.

22-08-2025

   1. Created Product Mini API and Variant Mini API to fetch lightweight product/variant details (title, cover image, size-based pricing, etc.), enabling faster cart and order rendering.
   2. Enhanced guest cart enrichment by integrating the mini APIs to fetch product/variant details and ensure size-based pricing is handled correctly.
   3. Fixed a price display bug where product prices were incorrectly showing extra digits (e.g., `8500` instead of `850`).
   4. Updated the guest cart flow to correctly handle multiple products/variants and display accurate prices.
   5. Implemented the Place Order flow with shipping address state management, initiating the order via API, and redirecting to checkout/payment.
   6. Built and integrated an Address component, supporting saved addresses, selecting an existing one, and adding new addresses.
   7. Integrated the order initiation API in the Cart page with proper address mapping (`postalCode → pincode`) to match backend requirements.
   8. Improved the order listing page to display all items in an order, instead of only the first item.



   9. Added conditional tracking link visibility, shown only when an order is in `shipped` or `delivered` status.
   10. Implemented a Cancel Order button on the frontend for users to cancel orders with status `ordered` or `accepted`.
   11. Developed a backend cancelOrderByUser controller that: Validates cancellable statuses (`ordered`/`accepted`), Restores stock if already decremented, Issues a full Stripe refund (including reverse transfer and application fee refund), Updates order status/history
   12. Added the cancel order route (`POST /api/orders/:orderId/cancel`) in the backend.

26-08-2025 

   1. Fixed header with --header-h (ResizeObserver) and global padding to prevent overlap.
   2. Synced sticky offsets using top-[calc(var(--header-h)+…)].
   3. Installed @types/google.maps and typed google refs.
   4. Map UX: gestureHandling: "greedy", keyboardShortcuts: false; overlays unclipped via overflow-visible + ancestor unclip.
   5. Numbered SVG markers + safe InfoWindow; click pans/zooms to selection.
   6. Layout: lg:items-stretch, no self-start/h-full; viewport-based map height.
   7. Provided AffixSidebar for Yelp-style behavior (fixed while scrolling, stops at list end).
   8. Finalized manual vs “track current” address flow; set default coords \[0,0] only as fallback.
   9. Wired backend geocoding: if manual address, use Google Geocoding → save GeoJSON `[lng, lat]`.
   10. Reviewed schema/controller + helper; confirmed `geocodeAddress` integration & error handling.
   11. Built `AllServicesMap` (Google Maps JS API) to plot all services from API coords; auto fitBounds.
   12. Fixed TS issues (`google` namespace) using `/* global google */` and `window.google` access.
   13. Implemented right-side map panel layout; independent list scroll; attempted sticky, then added JS sticky polyfill.
   14. Added numbered markers, centered digits; highlight selected (bigger red) + InfoWindow (serial, title, address).
   15. Hooked marker clicks to parent (`onSelect`) → set active service & smooth-scroll to the matching card; fixed prop types and removed `h-[100vh]` wrappers.

27-08-2025

   1. Ranked endpoint weighted by subscription price (priority + weight).
   2. Weighted interleave across plans with safeguards (credit accrual, epsilon clamp).
   3. Per-vendor cap + soft backfill to avoid empty pages.
   4. Eligibility rules: product/variant published, stock/backorder check; active business & subscription.
   5. Debug mode: removedAtAggregation, removedByCap, notOnPage, and timings.
   6. Aggregation hardening: ObjectId validation, early $sort + $limit, minimal $lookup projections, { allowDiskUse, maxTimeMS }.
   7. Vendor meta: 5-min TTL cache, clamped weights, chunked subscription lookups.
   8. Ranking helpers hardened (baseScore guards; interleaver safety).
   9. Controller hardening: input clipping, fetchLimit = pageSize10, paginate after backfill.
   10. Fixed .maxTimeMS issue by using aggregate options; delivered a master feature prompt for future work.
   11. body Padding top bug removed now it will be only applied in the layout with the heder fixed.
   12. in index page hero section now add the btn loading blink effect till we get the login state of user if user not logedin btn visble in logedin not visble.
   13. Performed reconnaissance on https://crownstandard.ca Identified 4 potential security issues, reported findings for bug

28-08-2025

   1. Extended ranked Products aggregation to return firstEligible variant (price, salePrice, discountEndDate, onSale, effectivePrice, size, label, color, images, videos, rating rollups).
   2. Fixed sale logic: use `salePrice` only when `discountEndDate > now`; also return both base `price` and `salePrice`+`discountEndDate`.
   3. Updated ranked controller to accept/passthrough `excludeProductId`.
   4. Added Similar Products API (separate): `GET /api/products/:id/similar` with middleware that sets category/subcategory + `excludeProductId`.
   5. Integrated the SimilarProduct component with the new similar API (this task completed).
   6. Integrated ShopProducts with ranked API; added Swiper image slider with autoplay & compact pagination dots.
   7. Implemented equal-height product cards across slides; price row pinned to bottom.
   8. Added multi-line ellipsis (…) for titles/descriptions (safe word breaks).
   9. Hardened fetch: AbortController handling, loading skeletons, and retry UI.
   10. Resolved Mongo aggregation var issues and polished sale badge/discount UI.


02-09-2025

   1. Added seedBusinessId and vendorFirst to res.locals.similar: seedBusinessId carries the seed product’s vendor so the controller can detect same-vendor items, and vendorFirst (default true, override with ?vendorFirst=0) tells the controller to show a top block of same-vendor products (seed excluded, sorted by score) before interleaving the rest by plan weight (cap applies only to “others”).

03-09-2025

   1. Created the mailer utility function which uses Nodemailer to send Business Approved email when an admin approves (or re-approves after unblock) a business to owner + business emails (deduped), with CTA to /partners/{slug}.
   2. Created the mailer utility function which uses Nodemailer to send Business Blocked email when an admin blocks/disapproves a business to owner + business emails (deduped), optionally including the admin note/reason.
   3. Created the mailer utility function which uses Nodemailer to send Order Confirmed (Customer) email with PDF invoice when Stripe `payment_intent.succeeded` marks the order as paid to the customer (userId.email).
   4. Created the mailer utility function which uses Nodemailer to send Paid Order (Vendor) email with PDF invoice when Stripe `payment_intent.succeeded` marks the order as paid to the vendor/business (vendorId.email, businessId.email, businessId.owner.email; deduped).
   5. Attempted approval without completed onboarding → 400 response, no state change, no email.
   6. Blocked → approved (re-approval) → same Approved email with CTA /partners/{slug}.
   7. PDF invoice (PDFKit) → items (name/SKU/size/color/qty), unit & line totals, grand total from `totalAmount` (minor→major), clean layout.
   8. Branding & deliverability → CID logo, clear preheaders, `List-Unsubscribe` header, concise action-oriented copy.
   9. Integrated Service Category Api In the Service page to Display the Service Managed by Admin Dashboard

03-09-2025

   1. Mailer Utility – Built orderMailer.js using Nodemailer to send order status emails (accepted/rejected) with Mosaic logo, polite wording, and a “View My Orders” button.
   2. Reject Order Flow – Modified rejectOrder controller to trigger rejection email after saving the order and handle Stripe refund with correct vendor account.
   3. Stripe Fix – Corrected Stripe Connect account reference to ensure refunds are processed from the vendor’s connected account.
   4. Accept Order Flow – Modified acceptOrder controller to send acceptance email after stock adjustment and saving the order.
   5. Removed dummy address (John Doe) → no hard-coded default in production.
   6. Decided current flow → users must enter delivery details fresh each time (no saved addresses yet).
   7. Fixed email code – added `axios`, made the Nodemailer transporter a singleton, and embedded the logo as a CID buffer so it always shows in inboxes.
   8. HTML → PDF invoices – swapped out PDFKit for Puppeteer; added `utils/pdfFromHtml.js` and a clean, branded template in `utils/invoiceHtml.js`.
   9. Invoice service – `services/invoiceService.js` renders a PDF from a populated order so any part of the app can reuse it.
   10. Invoice controller – `controllers/invoiceController.js` streams the PDF, handles inline vs download, and basic id validation.
   11. Download route – `GET /api/orders/:id/invoice.pdf?download=1` so customers/vendors can view or download their invoice directly.
   12. Totals fix – smart `toMajor(...)` auto-detects if `totalAmount` is minor or major (using subtotal as a hint) and `showAdj` is a boolean, keeping Subtotal/Adjustments/Grand Total accurate.


   Mosaic-biz-hub : Mailer Utility – Built orderMailer.js using Nodemailer to send order status emails (accepted/rejected) with Mosaic logo, polite wording, and a “View My Orders” button, Reject Order Flow – Modified rejectOrder controller to trigger rejection email after saving the order and handle Stripe refund with correct vendor account, Stripe Fix – Corrected Stripe Connect account reference to ensure refunds are processed from the vendor’s connected account, Accept Order Flow – Modified acceptOrder controller to send acceptance email after stock adjustment and saving the order, Removed dummy address (John Doe) → no hard-coded default in production, Decided current flow → users must enter delivery details fresh each time (no saved addresses yet), Fixed email code – added `axios`, made the Nodemailer transporter a singleton, and embedded the logo as a CID buffer so it always shows in inboxes, HTML → PDF invoices – swapped out PDFKit for Puppeteer; added `utils/pdfFromHtml.js` and a clean, branded template in `utils/invoiceHtml.js`, Invoice service – `services/invoiceService.js` renders a PDF from a populated order so any part of the app can reuse it, Invoice controller – `controllers/invoiceController.js` streams the PDF, handles inline vs download, and basic id validation, Download route – `GET /api/orders/:id/invoice.pdf?download=1` so customers/vendors can view or download their invoice directly, Totals fix – smart `toMajor(...)` auto-detects if `totalAmount` is minor or major (using subtotal as a hint) and `showAdj` is a boolean, keeping Subtotal/Adjustments/Grand Total accurate.

